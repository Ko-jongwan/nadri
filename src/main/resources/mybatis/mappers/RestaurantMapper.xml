<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.nadri.restaurant.mapper.RestaurantMapper">


	<!--
		getBestRestaurants()
	-->
	<select id="getBestRestaurants" resultType="com.nadri.restaurant.vo.Restaurant">
		select
			X.restaurant_no as no,
			X.restaurant_name as name,
			X.restaurant_picture as picture,
			(select 
				round(avg(A.rt_review_star_point), 1)
			 from 
			 	restaurant_review A 
			 where 
			 	A.restaurant_no = X.restaurant_no) starPoint
		from
			(select
				restaurant_no,
				restaurant_name,
				restaurant_picture
			from
				restaurant
			order by restaurant_sales desc
				) X
		where rownum &lt; to_number(5)
	</select>
	
	
	
	<!--
		Restaurant getRestaurantDetail();
	-->
	<select id="getRestaurantDetail" parameterType="int" resultType="com.nadri.restaurant.vo.Restaurant">
		select
			restaurant_no as no,
			restaurant_name as name,
			restaurant_picture as picture,
			restaurant_sales as sales,
			restaurant_content as content,
			restaurant_address as address,
			restaurant_parking as parking,
			restaurant_restdate as restDate,
			restaurant_tel as tel,
			restaurant_open_time as openTime,
			restaurant_lat as lat,
			restaurant_lon as lon
		from
			restaurant
		where
			restaurant_no = to_number(#{value})
	
	</select>
	
	<!--
		void insertRestaurant(); json 사용
	-->
	<!--
	<insert id="insertRestaurant" parameterType="com.nadri.restaurant.vo.Restaurant">
		<selectKey keyProperty="no" resultType="int" order="BEFORE">
			select restaurant_no.nextval
			from dual
		</selectKey>
		insert into restaurant
		(restaurant_no, restaurant_name, restaurant_picture, restaurant_address, restaurant_parking,
		 restaurant_tel, restaurant_lat, restaurant_lon, city_no, category_no, restaurant_restdate, restaurant_open_time)
		values
		(#{no}, #{name}, #{picture}, #{address}, #{parking}, #{tel}, #{lat}, #{lon}, #{cityNo}, #{categoryNo}, #{restDate}, #{openTime})	
	</insert>
	-->
	
	
	<!-- 
		void insertRestaurant(); form 사용
	-->
	<!--
	<insert id="insertRestaurant" parameterType="com.nadri.restaurant.vo.Restaurant">
		<selectKey keyProperty="no" resultType="int" order="BEFORE">
			select restaurant_no.nextval
			from dual
		</selectKey>
		insert into restaurant
		(restaurant_no, restaurant_name, restaurant_picture, restaurant_content, restaurant_category, restaurant_address,
		restaurant_city, restaurant_parking, restaurant_restdate, restaurant_tel, restaurant_open_time)
		values
		(#{no}, #{name}, #{picture}, #{content}, #{category}, #{address}, #{city}, #{parking}, #{restDate}, #{tel}, #{openTime})	
	</insert>
	  -->
	
	
	<select id="getRestaurantsTotalRows" parameterType="com.nadri.restaurant.web.form.RestaurantCriteria" resultType="int">
		select count(*)
		from restaurant
		<where>
			<if test="name != null">
					and restaurant_name like '%' || #{name} || '%'
			</if>
			<if test="city != null">
				and city_no = #{city}
			</if>
			<if test="category != null">
				and category_no = #{category}
			</if>	
		</where>		
	</select>
	
	<!-- 
		List<Book> searchBooks(Criteria criteria); 메소드와 매핑되는 SQL 구문 정의
		
		<where 태그>
			+ <where> 태그안에 sql문이 포함되면 where 키워드로 변경된다.
			+ <where> 태그안에 sql문중에서 첫번째 sql문이 "and 컬럼명 = 값" 의 형태면 and를 제거한다. 
	 -->
	<select id="searchRestaurants" parameterType="com.nadri.restaurant.web.form.RestaurantCriteria" resultType="com.nadri.restaurant.vo.Restaurant">
		select
			X.no,
			X.name,
			X.picture,
			X.categoryName,
			X.cityName,
			X.parking,
			X.openTime,
			(select 
				round(avg(A.rt_review_star_point), 1)
			 from 
			 	restaurant_review A 
			 where 
			 	A.restaurant_no = X.no) starPoint
		from (
			select
				A.restaurant_no as no,
				A.restaurant_name as name,
				A.restaurant_picture as picture,
				B.category_name as categoryName,
				C.city_name as cityName,
				A.restaurant_parking as parking,
				A.restaurant_open_time as openTime,
			row_number() over (order by restaurant_no desc) rn
			from restaurant A, restaurant_category B, restaurant_city C
			where
				A.category_no = B.category_no and A.city_no = C.city_no
				<if test="name != null">
					and A.restaurant_name like '%' || #{name} || '%'
				</if>
				<if test="city != null">
					and A.city_no = #{city}
				</if>
				<if test="category != null">
					and A.category_no = #{category}
				</if>
				<if test="sort == 'sales'">
					order by A.restaurant_sales desc
				</if>
				<if test="sort == 'starPoint'">
					order by A.restaurant_star_point desc
				</if>
		) X
		where rn between #{beginIndex} and #{endIndex}
	</select>
	
	
	<!-- 
		List<City> getAllCities();
	-->
	<select id="getAllCities" resultType="com.nadri.restaurant.vo.City">
		select
			city_no no,
			city_name cityName
		from
			restaurant_city
	</select>
	
	<!--
		List<Category> getAllCategories();
	-->
	<select id="getAllCategories" resultType="com.nadri.restaurant.vo.Category">
		select
			category_no no,
			category_name categoryName
		from
			restaurant_category
	</select>
	
	<!--
		double getRestaurantStar(int no)
	-->
	<select id="getRestaurantStar" parameterType="int" resultType="double">
		<![CDATA[
			select nvl(round(avg(rt_review_star_point),1), 0)
			from restaurant_review
			where restaurant_no = #{value}
		]]>		
	</select>
	
	<!--
		int getReviewCount(int no)
	-->
	<select id="getReviewCount" resultType="int">
		select count(*)
		from restaurant_review
		where restaurant_no = #{value}
	</select>
	<!--
		List<RestaurantReview> getReviewsByRestaurantNo(int no);
	-->
	<select id="getAllReviewsByRestaurantNo" resultType="com.nadri.restaurant.vo.RestaurantReview">
		select
				restaurantNo,
				userNo,
				no,
				picture,
				content,
				rating,
				createdDate,
				userName
			
		from(
			select
				A.restaurant_no restaurantNo,
				A.user_no userNo,
				A.rt_review_no no,
				A.rt_review_picture picture,
				A.rt_review_content content,
				A.rt_review_star_point rating,
				A.rt_review_created_date createdDate,
				B.user_name userName,
				row_number() over (order by restaurant_no desc) rn
			from
				restaurant_review A, user_table B
			where
				A.user_no = B.user_no
				and A.restaurant_no = #{no}
			)	
		where
			 rn between #{beginIndex} and #{endIndex}
		order by no desc
	
	</select>
	
	
	<!--
		void insertReview(RestaurantReview restaurnatReview)
		
	-->
	<insert id="insertReview" parameterType="com.nadri.restaurant.vo.RestaurantReview">
		<selectKey keyProperty="no" resultType="int" order="BEFORE">
			select restaurant_review_no.nextval
			from dual
		</selectKey>
		insert into restaurant_review
		(restaurant_no, user_no, rt_review_no, rt_review_picture, rt_review_content, rt_review_star_point)
		values
		(#{restaurantNo}, #{userNo}, #{no}, #{picture}, #{content}, #{rating})
	
	</insert>
	
	<!--
		void updateReview(RestaurantReview restaurantReview)
		
	-->
	<update id="updateReview" parameterType="com.nadri.restaurant.vo.RestaurantReview">
		update restaurant_review
		set
			rt_review_content = #{content},
			rt_review_star_point = #{rating},
			rt_review_picture = #{picture}
		where
			rt_review_no = #{no}
	</update>
	
	<!--
		void deleteReview(int ReviewNo)
	-->
	<delete id="deleteReview" parameterType="int">
		delete from restaurant_review
		where rt_review_no = #{value}
	</delete>
	
	<!--
		예약
	-->
	
	<!--
		Timetable getTime(int no);
	-->
	<select id="getTime" parameterType="int" resultType="com.nadri.restaurant.vo.Timetable">
		select
			start_time startTime
		from restaurant_time_table
		where time_table_no = #{value}
	</select>
	
	<!--
		List<Timetable> getAllTimetable();
	-->
	<select id="getAllTimetable" resultType="com.nadri.restaurant.vo.Timetable">
		select
			time_table_no timetableNo,
			start_time startTime,
			restaurant_capacity capacity
		from restaurant_time_table
	
	</select>
	
	<!--
		List<RegisterDto> getBookableTime(int restaurantNo, Date date);
	-->
	<select id="getBookableTime" resultType="com.nadri.restaurant.dto.BookableDto">
		select 
		    Y.time_table_no timeTableNo,
		    Y.start_time startTime,
		    Y.restaurant_capacity capacity,
		    Y.restaurant_capacity - nvl(reserved_people, 0) bookablePeople 
		from (select
		        A.time_table_no,
		        A.reserved_people
		      from
		        rt_reservation_current_state A
		      where
		        A.restaurant_no = #{restaurantNo}
		        and to_char(A.reservation_date, 'yyyy-mm-dd') = #{date}) X, restaurant_time_table Y
		where
		    X.time_table_no(+) = Y.time_table_no
		order by 
		    Y.time_table_no asc
	</select>
	
	<!-- 
		void insertReservation(Reservation reservation);
	-->
	<insert id="insertReservation" parameterType="com.nadri.restaurant.vo.Reservation">
		<selectKey keyProperty="no" resultType="int" order="BEFORE">
			select restaurant_reservation_no.nextval
			from dual
		</selectKey>
			insert into restaurant_reservation
				(reservation_no, restaurant_no, user_no, time_table_no, reservation_name, reservation_deposit, reservation_progress,
				reservation_adult, reservation_child, reservation_date, reservation_used_point, reservation_reserved_point, reservation_people)
			values
				(#{no}, #{restaurantNo}, #{userNo}, #{timetableNo}, #{reservedName}, #{deposit}, #{progress},
				#{adult}, #{child}, #{reservedDate}, #{usedPoint}, #{reservedPoint}, #{people})
	</insert>
	
	<!-- 
		void insertCurrentState(ReservationCurrentState currentState);
	-->
	<insert id="insertCurrentState" parameterType="com.nadri.restaurant.vo.ReservationCurrentState">
		<selectKey keyProperty="no" resultType="int" order="BEFORE">
			select current_state_seq.nextval
			from dual
		</selectKey>
		insert into restaurant_current_state
		(current_state_no, reservation_date, reserved_people, time_table_no, restaurant_no)
		values
		(#{no}, #{reservedDate}, #{reservedPeople}, #{timetableNo}, #{restaurantNo})
	</insert>

</mapper>