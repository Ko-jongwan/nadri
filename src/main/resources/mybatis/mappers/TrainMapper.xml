<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.nadri.train.mapper.TrainMapper">
	<!-- 한글 유니코드로 기차역 조회하기 -->
	<select id="getStationByWord" parameterType="string" resultType="com.nadri.train.vo.TrainStation">
		select station_id as id,
			 station_name as name,
			 city_code as cityCode,
			 check_used as isUsed  
		from train_station
		<where>
			<choose>
				<when test="word == 45207">
					station_name > nchr(0) and station_name &lt;= nchr(#{value})
				</when>
				<when test="word == 45795">
					station_name > nchr(45207) and station_name &lt;= nchr(#{value})
				</when>
				<when test="word == 46971">
					station_name > nchr(45795) and station_name &lt;= nchr(#{value})
				</when>
				<when test="word == 47559">
					station_name > nchr(46971) and station_name &lt;= nchr(#{value})
				</when>
				<when test="word == 48147">
					station_name > nchr(47559) and station_name &lt;= nchr(#{value})
				</when>
				<when test="word == 49323">
					station_name > nchr(48147) and station_name &lt;= nchr(#{value})
				</when>
				<when test="word == 50499">
					station_name > nchr(49323) and station_name &lt;= nchr(#{value})
				</when>
				<when test="word == 51087">
					station_name > nchr(50499) and station_name &lt;= nchr(#{value})
				</when>
				<when test="word == 52263">
					station_name > nchr(51087) and station_name &lt;= nchr(#{value})
				</when>
				<when test="word == 52851">
					station_name > nchr(52263) and station_name &lt;= nchr(#{value})
				</when>
				<when test="word == 53439">
					station_name > nchr(52851) and station_name &lt;= nchr(#{value})
				</when>
				<when test="word == 54027">
					station_name > nchr(53439) and station_name &lt;= nchr(#{value})
				</when>
				<when test="word == 54615">
					station_name > nchr(54027) and station_name &lt;= nchr(#{value})
				</when>
				<when test="word == 55203">
					station_name > nchr(54615) and station_name &lt;= nchr(#{value})
				</when>
			</choose>
		</where>
	</select>
	
	<select id="getAllTrainSchedules" resultType="com.nadri.train.vo.TrainSchedule">
		select 	schedule_no as no,
				schedule_departure_time as departureTime,
			 schedule_arrival_time as arrivalTime,
			 train_no as trainNo,
			 route_no as routeNo
		from train_schedule
		where schedule_no >= 1010 and schedule_no &lt; 1912
	</select>
	
	<insert id="insertNewSchedule" parameterType="java.util.List">
		insert into train_schedule(schedule_no, schedule_departure_time, schedule_arrival_time, train_no, route_no)
		select train_schedules_seq.nextval, A.* from (
		<foreach collection="list" item="data" separator="UNION ALL ">
			select #{data.departureTime}, #{data.arrivalTime}, 
				#{data.trainNo}, #{data.routeNo}
			from dual
		</foreach> ) A
	</insert>
	
	<!-- 검색 정보로 기차 스케줄 조회 sql -->
	<select id="getSchedulesByCriteria" parameterType="com.nadri.train.dto.TrainCriteria" resultType="com.nadri.train.dto.TrainSearchDto">
		with sche
		as (select s.schedule_no, s.schedule_departure_time, s.schedule_arrival_time, s.train_no,
		    n.type_no, p.train_name,
		    s.route_no,
		    (select count(*) cnt from train_ticket b, train_room m where b.is_canceled = 'n' and b.schedule_no(+) = s.schedule_no and b.room_no = m.room_no and m.room_type = '특실') as booking_s,
		    (select sum(root_seat_count)  from train_room a where a.train_no = s.train_no and a.room_type = '특실') as special,
		    (select count(*) cnt from train_ticket b, train_room m where b.is_canceled = 'n' and b.schedule_no(+) = s.schedule_no and b.room_no = m.room_no and m.room_type = '일반실') as booking_n,
		    (select sum(root_seat_count)  from train_room a where a.train_no = s.train_no and a.room_type = '일반실') as normal
		from train_schedule s, train_route r, train_station t1, train_station t2, train n, train_type p
		where t1.station_name = #{departureStation} and t2.station_name = #{arrivalStation}
		and schedule_departure_time >= #{departureDate} and schedule_departure_time &lt; trunc(#{departureDate}+1)
		and s.route_no = r.route_no
		and r.departure_station_id = t1.station_id
		and r.arrival_station_id = t2.station_id
		and n.train_no = s.train_no
		and n.type_no = p.type_no
		order by s.schedule_no)
		select schedule_no as scheduleNo, 
				schedule_departure_time as departureTime, 
				schedule_arrival_time as arrivalTime, 
				train_no as trainNo,
		    	type_no as typeNo, 
		    	train_name as trainName,
		   		route_no as routeNo, 
		   		booking_s as specialBooking, 
		   		special as specialSeat, 
		   		booking_n as normalBooking, 
		   		normal as normalSeat, 
		   		price as price
		from (select row_number() over(order by x.schedule_no) rn, 
		        x.schedule_no, x.schedule_departure_time, x.schedule_arrival_time, x.train_no,
		        x.type_no, x.train_name,
		        x.route_no, x.booking_s, x.special, x.booking_n, x.normal, c.price
		        from sche x, train_price c
		        where c.seat_grade = '일반실'
		        and x.type_no = c.type_no
		        and x.route_no in (c.down_route_no, c.up_route_no))
		where rn >= 7*#{rowNo }+1 and rn &lt; 7*#{rowNo}+8
	</select>
	
	<!-- 열차의 호차 목록을 불러온다. -->
	<select id="getTrainRoom" parameterType="com.nadri.train.web.model.TrainRoomInfo" resultType="com.nadri.train.vo.TrainRoom">
		select r.room_no as no, 
				r.room_name as name, 
				r.root_seat_count as seatNum,
				r.train_no as trainNo,
				(select count(*)
	             from train_ticket t
	             where t.room_no(+) = r.room_no
	             and t.schedule_no = #{schduleNo }
	             and t.is_canceled = 'N') as bookedSeatNum
		from train_room r
		where r.train_no = #{trainNo }
		and r.room_type = #{roomType }
	</select>
	
	<!-- 예약된 좌석번호목록 -->
	<select id="getTrainSeatNo" resultType="int">
		select seat_no
		from train_ticket
		where room_no = #{roomNo}
		and schedule_no = #{scheduleNo}
		and is_canceled = 'N'
	</select>
</mapper>